/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1-snapshot-20091015 on Mon Nov 16 19:36:49 2009
 */

#include "sipAPIlibserial.h"

#line 6 "exception.sip"
#include <exception>
#line 12 "siplibserialstdexception.cpp"



class sipstd_exception : public std::exception
{
public:
    sipstd_exception() throw();
    sipstd_exception(const std::exception&);
    virtual ~sipstd_exception() throw();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    const char * what() const throw();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipstd_exception(const sipstd_exception &);
    sipstd_exception &operator = (const sipstd_exception &);

    char sipPyMethods[1];
};

sipstd_exception::sipstd_exception() throw(): std::exception(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipstd_exception::sipstd_exception(const std::exception& a0): std::exception(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipstd_exception::~sipstd_exception() throw()
{
    sipCommonDtor(sipPySelf);
}

const char * sipstd_exception::what() const throw()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_what);

    if (!meth)
        return std::exception::what();

    extern const char * sipVH_libserial_0(sip_gilstate_t,PyObject *,int,sipSimpleWrapper *);

    return sipVH_libserial_0(sipGILState,meth,9,sipPySelf);
}


extern "C" {static PyObject *meth_std_exception_what(PyObject *, PyObject *);}
static PyObject *meth_std_exception_what(PyObject *sipSelf, PyObject *sipArgs)
{
    int sipArgsParsed = 0;
    bool sipSelfWasArg = (!sipSelf || sipIsDerived((sipSimpleWrapper *)sipSelf));

    {
        std::exception *sipCpp;

        if (sipParseArgs(&sipArgsParsed,sipArgs,"B",&sipSelf,sipType_std_exception,&sipCpp))
        {
            const char *sipRes;

            sipRes = (sipSelfWasArg ? sipCpp->std::exception::what() : sipCpp->what());

            if (sipRes == NULL)
            {
                Py_INCREF(Py_None);
                return Py_None;
            }

            return SIPBytes_FromString(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipArgsParsed,sipName_exception,sipName_what);

    return NULL;
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_std_exception(void *, const sipTypeDef *);}
static void *cast_std_exception(void *ptr, const sipTypeDef *targetType)
{
    if (targetType == sipType_std_exception)
        return ptr;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_std_exception(void *, int);}
static void release_std_exception(void *sipCppV,int state)
{
    if (state & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipstd_exception *>(sipCppV);
    else
        delete reinterpret_cast<std::exception *>(sipCppV);
}


extern "C" {static void assign_std_exception(void *, SIP_SSIZE_T, const void *);}
static void assign_std_exception(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<std::exception *>(sipDst)[sipDstIdx] = *reinterpret_cast<const std::exception *>(sipSrc);
}


extern "C" {static void *array_std_exception(SIP_SSIZE_T);}
static void *array_std_exception(SIP_SSIZE_T sipNrElem)
{
    return new std::exception[sipNrElem];
}


extern "C" {static void *copy_std_exception(const void *, SIP_SSIZE_T);}
static void *copy_std_exception(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new std::exception(reinterpret_cast<const std::exception *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_std_exception(sipSimpleWrapper *);}
static void dealloc_std_exception(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipstd_exception *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_std_exception(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_std_exception(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_std_exception(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    sipstd_exception *sipCpp = 0;

    if (!sipCpp)
    {
        if (sipParseArgs(sipArgsParsed,sipArgs,""))
        {
            sipCpp = new sipstd_exception();
        }
    }

    if (!sipCpp)
    {
        const std::exception * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9",sipType_std_exception,&a0))
        {
            try
            {
            sipCpp = new sipstd_exception(*a0);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }
        }
    }

    if (sipCpp)
        sipCpp->sipPySelf = sipSelf;

    return sipCpp;
}


static PyMethodDef methods_std_exception[] = {
    {SIP_MLNAME_CAST(sipName_what), meth_std_exception_what, METH_VARARGS, NULL}
};


sipClassTypeDef sipTypeDef_libserial_std_exception = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_std__exception,
        {0}
    },
    {
        sipNameNr_exception,
        {11, 255, 0},
        1, methods_std_exception,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    0,
    0,
    init_std_exception,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_std_exception,
    assign_std_exception,
    array_std_exception,
    copy_std_exception,
    release_std_exception,
    cast_std_exception,
    0,
    0,
    0
};
