/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1-snapshot-20091015 on Mon Nov 16 19:36:49 2009
 */

#include "sipAPIlibserial.h"

#line 4 "string.sip"
#include <string>
#include <iostream>
#line 13 "siplibserialstdstring.cpp"



extern "C" {static void assign_std_string(void *, SIP_SSIZE_T, const void *);}
static void assign_std_string(void *sipDst, SIP_SSIZE_T sipDstIdx, const void *sipSrc)
{
    reinterpret_cast<std::string *>(sipDst)[sipDstIdx] = *reinterpret_cast<const std::string *>(sipSrc);
}


extern "C" {static void *array_std_string(SIP_SSIZE_T);}
static void *array_std_string(SIP_SSIZE_T sipNrElem)
{
    return new std::string[sipNrElem];
}


extern "C" {static void *copy_std_string(const void *, SIP_SSIZE_T);}
static void *copy_std_string(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new std::string(reinterpret_cast<const std::string *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_std_string(void *, int);}
static void release_std_string(void *ptr, int)
{
    delete reinterpret_cast<std::string *>(ptr);
}



extern "C" {static int convertTo_std_string(PyObject *, void **, int *, PyObject *);}
static int convertTo_std_string(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
    std::string **sipCppPtr = reinterpret_cast<std::string **>(sipCppPtrV);

#line 9 "string.sip"
        //
        // If sipIsErr is NULL then we must check the type of the
        // Python object and return the result.
        //
        if ( ! sipIsErr )
        {
            return PyString_Check( sipPy ) ;
        }

        char *str_val = 0 ;
        if ( PyArg_Parse( sipPy, "s", &str_val ) )
        {
            std::string* ret_val = new std::string( str_val ) ;
            if ( 0 == ret_val )
            {
                *sipIsErr = 1 ;
                return 0 ;
            }
            *sipCppPtr = ret_val ;
	}
        else
        {
            *sipIsErr = 1 ;
            return 0 ;
        }
	return sipGetState( sipTransferObj ) ;
#line 79 "siplibserialstdstring.cpp"
}


extern "C" {static PyObject *convertFrom_std_string(void *, PyObject *);}
static PyObject *convertFrom_std_string(void *sipCppV,PyObject *)
{
   std::string *sipCpp = reinterpret_cast<std::string *>(sipCppV);

#line 38 "string.sip"
        /*
         * Inspired by QtCore/qstring.cpp from PyQt4 source code.
         */
        PyObject *uobj = 
            PyUnicode_FromUnicode( NULL, sipCpp->length() );
    
        if ( 0 == uobj )
        {
            return 0 ;
        }

        Py_UNICODE *pyu = PyUnicode_AS_UNICODE( uobj ) ;

        for( unsigned int i=0; i<sipCpp->length(); ++i, ++pyu )
        {
            *pyu = sipCpp->at(i) ;
        }
        return uobj;	
#line 107 "siplibserialstdstring.cpp"
}


sipMappedTypeDef sipTypeDef_libserial_std_string = {
    {
        -1,
        0,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_std__string,
        {0}
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_std_string,
    array_std_string,
    copy_std_string,
    release_std_string,
    convertTo_std_string,
    convertFrom_std_string
};
