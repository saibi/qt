/*
 * Module code.
 *
 * Generated by SIP 4.9.1-snapshot-20091015 on Mon Nov 16 19:36:49 2009
 */

#include "sipAPIlibserial.h"

#line 6 "exception.sip"
#include <exception>
#line 12 "siplibserialcmodule.cpp"
#line 5 "SerialPort.sip"
#include <SerialPort.h>
#line 15 "siplibserialcmodule.cpp"

/* Define the strings used by this module. */
const char sipStrings_libserial[] = {
    'S', 'e', 'r', 'i', 'a', 'l', 'P', 'o', 'r', 't', ':', ':', 'U', 'n', 's', 'u', 'p', 'p', 'o', 'r', 't', 'e', 'd', 'B', 'a', 'u', 'd', 'R', 'a', 't', 'e', 0,
    's', 't', 'd', ':', ':', 'v', 'e', 'c', 't', 'o', 'r', '<', 'u', 'n', 's', 'i', 'g', 'n', 'e', 'd', ' ', 'c', 'h', 'a', 'r', '>', 0,
    's', 't', 'd', ':', ':', 'v', 'e', 'c', 't', 'o', 'r', '<', 'u', 'n', 's', 'i', 'g', 'n', 'e', 'd', ' ', 'i', 'n', 't', '>', 0,
    'S', 'e', 'r', 'i', 'a', 'l', 'P', 'o', 'r', 't', ':', ':', 'C', 'h', 'a', 'r', 'a', 'c', 't', 'e', 'r', 'S', 'i', 'z', 'e', 0,
    'S', 'e', 'r', 'i', 'a', 'l', 'P', 'o', 'r', 't', ':', ':', 'R', 'e', 'a', 'd', 'T', 'i', 'm', 'e', 'o', 'u', 't', 0,
    'S', 'e', 'r', 'i', 'a', 'l', 'P', 'o', 'r', 't', ':', ':', 'A', 'l', 'r', 'e', 'a', 'd', 'y', 'O', 'p', 'e', 'n', 0,
    'S', 'e', 'r', 'i', 'a', 'l', 'P', 'o', 'r', 't', ':', ':', 'F', 'l', 'o', 'w', 'C', 'o', 'n', 't', 'r', 'o', 'l', 0,
    'S', 'e', 'r', 'i', 'a', 'l', 'P', 'o', 'r', 't', ':', ':', 'O', 'p', 'e', 'n', 'F', 'a', 'i', 'l', 'e', 'd', 0,
    's', 't', 'd', ':', ':', 'i', 'n', 'v', 'a', 'l', 'i', 'd', '_', 'a', 'r', 'g', 'u', 'm', 'e', 'n', 't', 0,
    'F', 'L', 'O', 'W', '_', 'C', 'O', 'N', 'T', 'R', 'O', 'L', '_', 'D', 'E', 'F', 'A', 'U', 'L', 'T', 0,
    'S', 'e', 'r', 'i', 'a', 'l', 'P', 'o', 'r', 't', ':', ':', 'S', 't', 'o', 'p', 'B', 'i', 't', 's', 0,
    'S', 'e', 'r', 'i', 'a', 'l', 'P', 'o', 'r', 't', ':', ':', 'B', 'a', 'u', 'd', 'R', 'a', 't', 'e', 0,
    's', 't', 'd', ':', ':', 'v', 'e', 'c', 't', 'o', 'r', '<', 'd', 'o', 'u', 'b', 'l', 'e', '>', 0,
    'S', 'e', 'r', 'i', 'a', 'l', 'P', 'o', 'r', 't', ':', ':', 'N', 'o', 't', 'O', 'p', 'e', 'n', 0,
    'S', 'e', 'r', 'i', 'a', 'l', 'P', 'o', 'r', 't', ':', ':', 'P', 'a', 'r', 'i', 't', 'y', 0,
    's', 't', 'd', ':', ':', 'r', 'u', 'n', 't', 'i', 'm', 'e', '_', 'e', 'r', 'r', 'o', 'r', 0,
    'F', 'L', 'O', 'W', '_', 'C', 'O', 'N', 'T', 'R', 'O', 'L', '_', 'N', 'O', 'N', 'E', 0,
    'F', 'L', 'O', 'W', '_', 'C', 'O', 'N', 'T', 'R', 'O', 'L', '_', 'H', 'A', 'R', 'D', 0,
    'S', 'T', 'O', 'P', '_', 'B', 'I', 'T', 'S', '_', 'D', 'E', 'F', 'A', 'U', 'L', 'T', 0,
    'C', 'H', 'A', 'R', '_', 'S', 'I', 'Z', 'E', '_', 'D', 'E', 'F', 'A', 'U', 'L', 'T', 0,
    's', 't', 'd', ':', ':', 'v', 'e', 'c', 't', 'o', 'r', '<', 'i', 'n', 't', '>', 0,
    'G', 'e', 't', 'N', 'u', 'm', 'O', 'f', 'S', 't', 'o', 'p', 'B', 'i', 't', 's', 0,
    'S', 'e', 't', 'N', 'u', 'm', 'O', 'f', 'S', 't', 'o', 'p', 'B', 'i', 't', 's', 0,
    's', 't', 'd', ':', ':', 'l', 'o', 'g', 'i', 'c', '_', 'e', 'r', 'r', 'o', 'r', 0,
    'I', 's', 'D', 'a', 't', 'a', 'A', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 0,
    'G', 'e', 't', 'F', 'l', 'o', 'w', 'C', 'o', 'n', 't', 'r', 'o', 'l', 0,
    'S', 'e', 't', 'F', 'l', 'o', 'w', 'C', 'o', 'n', 't', 'r', 'o', 'l', 0,
    'P', 'A', 'R', 'I', 'T', 'Y', '_', 'D', 'E', 'F', 'A', 'U', 'L', 'T', 0,
    's', 't', 'd', ':', ':', 'e', 'x', 'c', 'e', 'p', 't', 'i', 'o', 'n', 0,
    'B', 'A', 'U', 'D', '_', 'D', 'E', 'F', 'A', 'U', 'L', 'T', 0,
    'G', 'e', 't', 'C', 'h', 'a', 'r', 'S', 'i', 'z', 'e', 0,
    'S', 'e', 't', 'C', 'h', 'a', 'r', 'S', 'i', 'z', 'e', 0,
    'G', 'e', 't', 'B', 'a', 'u', 'd', 'R', 'a', 't', 'e', 0,
    'S', 'e', 't', 'B', 'a', 'u', 'd', 'R', 'a', 't', 'e', 0,
    'P', 'A', 'R', 'I', 'T', 'Y', '_', 'N', 'O', 'N', 'E', 0,
    'P', 'A', 'R', 'I', 'T', 'Y', '_', 'E', 'V', 'E', 'N', 0,
    'S', 'T', 'O', 'P', '_', 'B', 'I', 'T', 'S', '_', '2', 0,
    'S', 'T', 'O', 'P', '_', 'B', 'I', 'T', 'S', '_', '1', 0,
    'C', 'H', 'A', 'R', '_', 'S', 'I', 'Z', 'E', '_', '8', 0,
    'C', 'H', 'A', 'R', '_', 'S', 'I', 'Z', 'E', '_', '7', 0,
    'C', 'H', 'A', 'R', '_', 'S', 'I', 'Z', 'E', '_', '6', 0,
    'C', 'H', 'A', 'R', '_', 'S', 'I', 'Z', 'E', '_', '5', 0,
    'B', 'A', 'U', 'D', '_', '4', '6', '0', '8', '0', '0', 0,
    'B', 'A', 'U', 'D', '_', '2', '3', '0', '4', '0', '0', 0,
    'B', 'A', 'U', 'D', '_', '1', '1', '5', '2', '0', '0', 0,
    's', 't', 'd', ':', ':', 's', 't', 'r', 'i', 'n', 'g', 0,
    'P', 'A', 'R', 'I', 'T', 'Y', '_', 'O', 'D', 'D', 0,
    'B', 'A', 'U', 'D', '_', '5', '7', '6', '0', '0', 0,
    'B', 'A', 'U', 'D', '_', '3', '8', '4', '0', '0', 0,
    'B', 'A', 'U', 'D', '_', '1', '9', '2', '0', '0', 0,
    'S', 'e', 'r', 'i', 'a', 'l', 'P', 'o', 'r', 't', 0,
    'W', 'r', 'i', 't', 'e', 'B', 'y', 't', 'e', 0,
    'G', 'e', 't', 'P', 'a', 'r', 'i', 't', 'y', 0,
    'S', 'e', 't', 'P', 'a', 'r', 'i', 't', 'y', 0,
    'B', 'A', 'U', 'D', '_', '9', '6', '0', '0', 0,
    'B', 'A', 'U', 'D', '_', '4', '8', '0', '0', 0,
    'B', 'A', 'U', 'D', '_', '2', '4', '0', '0', 0,
    'B', 'A', 'U', 'D', '_', '1', '8', '0', '0', 0,
    'B', 'A', 'U', 'D', '_', '1', '2', '0', '0', 0,
    'l', 'i', 'b', 's', 'e', 'r', 'i', 'a', 'l', 0,
    'R', 'e', 'a', 'd', 'L', 'i', 'n', 'e', 0,
    'R', 'e', 'a', 'd', 'B', 'y', 't', 'e', 0,
    'B', 'A', 'U', 'D', '_', '6', '0', '0', 0,
    'B', 'A', 'U', 'D', '_', '3', '0', '0', 0,
    'B', 'A', 'U', 'D', '_', '2', '0', '0', 0,
    'B', 'A', 'U', 'D', '_', '1', '5', '0', 0,
    'B', 'A', 'U', 'D', '_', '1', '3', '4', 0,
    'B', 'A', 'U', 'D', '_', '1', '1', '0', 0,
    'B', 'A', 'U', 'D', '_', '7', '5', 0,
    'B', 'A', 'U', 'D', '_', '5', '0', 0,
    'G', 'e', 't', 'D', 's', 'r', 0,
    'G', 'e', 't', 'C', 't', 's', 0,
    'G', 'e', 't', 'R', 't', 's', 0,
    'S', 'e', 't', 'R', 't', 's', 0,
    'G', 'e', 't', 'D', 't', 'r', 0,
    'S', 'e', 't', 'D', 't', 'r', 0,
    'I', 's', 'O', 'p', 'e', 'n', 0,
    'W', 'r', 'i', 't', 'e', 0,
    'C', 'l', 'o', 's', 'e', 0,
    'R', 'e', 'a', 'd', 0,
    'w', 'h', 'a', 't', 0,
    's', 't', 'd', 0,
};

const char * sipVH_libserial_0(sip_gilstate_t sipGILState,PyObject *sipMethod,int sipResKey,sipSimpleWrapper *sipPySelf)
{
    char * sipRes = 0;
    PyObject *resObj = sipCallMethod(0,sipMethod,"");

    if (!resObj || sipParseResult(0,sipMethod,resObj,"SB",sipPySelf,sipResKey,&sipRes) < 0)
        PyErr_Print();

    Py_XDECREF(resObj);
    Py_DECREF(sipMethod);

    SIP_RELEASE_GIL(sipGILState)

    return sipRes;
}
static sipEnumTypeDef enumTypes[] = {
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_SerialPort__FlowControl, {0}}, sipNameNr_FlowControl, 0, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_SerialPort__Parity, {0}}, sipNameNr_Parity, 0, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_SerialPort__StopBits, {0}}, sipNameNr_StopBits, 0, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_SerialPort__CharacterSize, {0}}, sipNameNr_CharacterSize, 0, NULL},
    {{-1, 0, 0, SIP_TYPE_ENUM, sipNameNr_SerialPort__BaudRate, {0}}, sipNameNr_BaudRate, 0, NULL},
};


/*
 * This defines each type in this module.
 */
static sipTypeDef *typesTable[] = {
    &sipTypeDef_libserial_SerialPort.ctd_base,
    &sipTypeDef_libserial_SerialPort_AlreadyOpen.ctd_base,
    &enumTypes[4].etd_base,
    &enumTypes[3].etd_base,
    &enumTypes[0].etd_base,
    &sipTypeDef_libserial_SerialPort_NotOpen.ctd_base,
    &sipTypeDef_libserial_SerialPort_OpenFailed.ctd_base,
    &enumTypes[1].etd_base,
    &sipTypeDef_libserial_SerialPort_ReadTimeout.ctd_base,
    &enumTypes[2].etd_base,
    &sipTypeDef_libserial_SerialPort_UnsupportedBaudRate.ctd_base,
    &sipTypeDef_libserial_std.ctd_base,
    &sipTypeDef_libserial_std_exception.ctd_base,
    &sipTypeDef_libserial_std_invalid_argument.ctd_base,
    &sipTypeDef_libserial_std_logic_error.ctd_base,
    &sipTypeDef_libserial_std_runtime_error.ctd_base,
    &sipTypeDef_libserial_std_string.mtd_base,
    &sipTypeDef_libserial_std_vector_2400.mtd_base,
    &sipTypeDef_libserial_std_vector_1800.mtd_base,
    &sipTypeDef_libserial_std_vector_1300.mtd_base,
    &sipTypeDef_libserial_std_vector_1900.mtd_base,
};


/*
 * These define each typedef in this module.
 */
static sipTypedefDef typedefsTable[] = {
    {"SerialPort::DataBuffer", "std::vector<unsigned char>"},
};


/*
 * This defines the virtual handlers that this module implements and can be
 * used by other modules.
 */
static sipVirtHandlerFunc virtHandlersTable[] = {
    (sipVirtHandlerFunc)sipVH_libserial_0,
};


/* This defines this module. */
sipExportedModuleDef sipModuleAPI_libserial = {
    0,
    SIP_API_MINOR_NR,
    sipNameNr_libserial,
    0,
    0,
    sipStrings_libserial,
    NULL,
    NULL,
    21,
    typesTable,
    NULL,
    0,
    NULL,
    1,
    typedefsTable,
    virtHandlersTable,
    NULL,
    {NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL},
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL
};


/* The SIP API and the APIs of any imported modules. */
const sipAPIDef *sipAPI_libserial;


/* The Python module initialisation function. */
#if PY_MAJOR_VERSION >= 3
#define SIP_MODULE_ENTRY        PyInit_libserial
#define SIP_MODULE_TYPE         PyObject *
#define SIP_MODULE_DISCARD(r)   Py_DECREF(r)
#define SIP_MODULE_RETURN(r)    return (r)
#else
#define SIP_MODULE_ENTRY        initlibserial
#define SIP_MODULE_TYPE         void
#define SIP_MODULE_DISCARD(r)
#define SIP_MODULE_RETURN(r)    return
#endif

#if defined(SIP_STATIC_MODULE)
extern "C" SIP_MODULE_TYPE SIP_MODULE_ENTRY()
#else
PyMODINIT_FUNC SIP_MODULE_ENTRY()
#endif
{
    static PyMethodDef sip_methods[] = {
        {0, 0, 0, 0}
    };

#if PY_MAJOR_VERSION >= 3
    static PyModuleDef sip_module_def = {
        PyModuleDef_HEAD_INIT,
        "libserial",
        NULL,
        -1,
        sip_methods,
        NULL,
        NULL,
        NULL,
        NULL
    };
#endif

    PyObject *sipModule, *sipModuleDict;
    PyObject *sip_sipmod, *sip_capiobj;

    /* Initialise the module and get it's dictionary. */
#if PY_MAJOR_VERSION >= 3
    sipModule = PyModule_Create(&sip_module_def);
#elif PY_VERSION_HEX >= 0x02050000
    sipModule = Py_InitModule(sipName_libserial, sip_methods);
#else
    sipModule = Py_InitModule(const_cast<char *>(sipName_libserial), sip_methods);
#endif

    if (sipModule == NULL)
        SIP_MODULE_RETURN(NULL);

    sipModuleDict = PyModule_GetDict(sipModule);

    /* Import the SIP module and get it's API. */
#if PY_VERSION_HEX >= 0x02050000
    sip_sipmod = PyImport_ImportModule("sip");
#else
    sip_sipmod = PyImport_ImportModule(const_cast<char *>("sip"));
#endif

    if (sip_sipmod == NULL)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(NULL);
    }

    sip_capiobj = PyDict_GetItemString(PyModule_GetDict(sip_sipmod), "_C_API");

    if (sip_capiobj == NULL || !PyCObject_Check(sip_capiobj))
    {
        Py_DECREF(sip_sipmod);
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(NULL);
    }

    sipAPI_libserial = reinterpret_cast<const sipAPIDef *>(PyCObject_AsVoidPtr(sip_capiobj));

    /* Export the module and publish it's API. */
    if (sipExportModule(&sipModuleAPI_libserial,SIP_API_MAJOR_NR,SIP_API_MINOR_NR,0) < 0)
    {
        Py_DECREF(sip_sipmod);
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(0);
    }
    /* Initialise the module now all its dependencies have been set up. */
    if (sipInitModule(&sipModuleAPI_libserial,sipModuleDict) < 0)
    {
        Py_DECREF(sip_sipmod);
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(0);
    }

    SIP_MODULE_RETURN(sipModule);
}
