/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.9.1-snapshot-20091015 on Mon Nov 16 19:36:49 2009
 */

#include "sipAPIlibserial.h"

#line 5 "SerialPort.sip"
#include <SerialPort.h>
#line 12 "siplibserialSerialPortNotOpen.cpp"

#line 4 "string.sip"
#include <string>
#include <iostream>
#line 17 "siplibserialSerialPortNotOpen.cpp"


class sipSerialPort_NotOpen : public SerialPort::NotOpen
{
public:
    sipSerialPort_NotOpen(const std::string&);
    sipSerialPort_NotOpen(const SerialPort::NotOpen&);
    virtual ~sipSerialPort_NotOpen() throw();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    const char * what() const throw();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipSerialPort_NotOpen(const sipSerialPort_NotOpen &);
    sipSerialPort_NotOpen &operator = (const sipSerialPort_NotOpen &);

    char sipPyMethods[1];
};

sipSerialPort_NotOpen::sipSerialPort_NotOpen(const std::string& a0): SerialPort::NotOpen(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipSerialPort_NotOpen::sipSerialPort_NotOpen(const SerialPort::NotOpen& a0): SerialPort::NotOpen(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipSerialPort_NotOpen::~sipSerialPort_NotOpen() throw()
{
    sipCommonDtor(sipPySelf);
}

const char * sipSerialPort_NotOpen::what() const throw()
{
    sip_gilstate_t sipGILState;
    PyObject *meth;

    meth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_what);

    if (!meth)
        return std::logic_error::what();

    extern const char * sipVH_libserial_0(sip_gilstate_t,PyObject *,int,sipSimpleWrapper *);

    return sipVH_libserial_0(sipGILState,meth,5,sipPySelf);
}


/* Cast a pointer to a type somewhere in its superclass hierarchy. */
extern "C" {static void *cast_SerialPort_NotOpen(void *, const sipTypeDef *);}
static void *cast_SerialPort_NotOpen(void *ptr, const sipTypeDef *targetType)
{
    void *res;

    if (targetType == sipType_SerialPort_NotOpen)
        return ptr;

    if ((res = ((const sipClassTypeDef *)sipType_std_logic_error)->ctd_cast((std::logic_error *)(SerialPort::NotOpen *)ptr,targetType)) != NULL)
        return res;

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_SerialPort_NotOpen(void *, int);}
static void release_SerialPort_NotOpen(void *sipCppV,int state)
{
#line 65 "SerialPort.sip"
	        return ;
#line 97 "siplibserialSerialPortNotOpen.cpp"

    if (state & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipSerialPort_NotOpen *>(sipCppV);
    else
        delete reinterpret_cast<SerialPort::NotOpen *>(sipCppV);
}


extern "C" {static void dealloc_SerialPort_NotOpen(sipSimpleWrapper *);}
static void dealloc_SerialPort_NotOpen(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerived(sipSelf))
        reinterpret_cast<sipSerialPort_NotOpen *>(sipSelf->u.cppPtr)->sipPySelf = NULL;

    if (sipIsPyOwned(sipSelf))
    {
        release_SerialPort_NotOpen(sipSelf->u.cppPtr,sipSelf->flags);
    }
}


extern "C" {static void *init_SerialPort_NotOpen(sipSimpleWrapper *, PyObject *, PyObject **, int *);}
static void *init_SerialPort_NotOpen(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject **, int *sipArgsParsed)
{
    sipSerialPort_NotOpen *sipCpp = 0;

    if (!sipCpp)
    {
        const std::string * a0;
        int a0State = 0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J1",sipType_std_string,&a0,&a0State))
        {
            try
            {
            sipCpp = new sipSerialPort_NotOpen(*a0);
            }
            catch (...)
            {

            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);
                sipRaiseUnknownException();
                return NULL;
            }

            sipReleaseType(const_cast<std::string *>(a0),sipType_std_string,a0State);
        }
    }

    if (!sipCpp)
    {
        const SerialPort::NotOpen * a0;

        if (sipParseArgs(sipArgsParsed,sipArgs,"J9",sipType_SerialPort_NotOpen,&a0))
        {
            try
            {
            sipCpp = new sipSerialPort_NotOpen(*a0);
            }
            catch (...)
            {
                sipRaiseUnknownException();
                return NULL;
            }
        }
    }

    if (sipCpp)
        sipCpp->sipPySelf = sipSelf;

    return sipCpp;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_SerialPort_NotOpen[] = {{14, 255, 1}};


sipClassTypeDef sipTypeDef_libserial_SerialPort_NotOpen = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_SerialPort__NotOpen,
        {0}
    },
    {
        sipNameNr_NotOpen,
        {0, 255, 0},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    -1,
    -1,
    supers_SerialPort_NotOpen,
    0,
    init_SerialPort_NotOpen,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_SerialPort_NotOpen,
    0,
    0,
    0,
    release_SerialPort_NotOpen,
    cast_SerialPort_NotOpen,
    0,
    0,
    0
};
